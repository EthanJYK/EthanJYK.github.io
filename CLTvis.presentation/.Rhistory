a <- rownames(train.data)[(train.data$parentesco1==1 && train.data$v2a1 != 0)]
b <- rownames(train.data)[(train.data$parentesco1==1 && train.data$v2a1 != 0)]
b <- rownames(train.data)[(train.data$parentesco1==1)]
head(s)
head(a)
b <- rownames(train.data)[(train.data$parentesco1==1) && (train.data$v2a1 != 0)]
b <- rownames(train.data)[(train.data$parentesco1==1)]
a <- rownames(train.data[(train.data$parentesco1==1 && train.data$v2a1 != 0),])
train.data$parentesco1==1
train.data$parentesco1==1 && train.data$v2a1 != NA
a <- rownames(train.data[(train.data$parentesco1==1 && train.data$v2a1 != NA),])
b <- rownames(train.data)[(train.data$parentesco1==1) && (train.data$v2a1 != NA)]
train.data[(train.data$parentesco1==1) && (train.data$v2a1 != NA)]
train.data[(train.data$parentesco1==1) && (train.data$v2a1 != NA),]
train.data[(train.data$parentesco1==1) & (train.data$v2a1 != NA)]
a <- rownames(train.data)[(train.data$parentesco1==1) & (train.data$v2a1 != NA)]
a <- rownames(train.data[(train.data$parentesco1==1) & (train.data$v2a1 != NA)])
a <- rownames(train.data[(train.data$parentesco1==1) & (train.data$v2a1 != NA),])
b <- rownames(train.data)[(train.data$parentesco1==1)]
c <- rownames(train.data)[(train.data$v2a1!=NA)]
c <- rownames(train.data)[-is.na(train.data$v2a1!)]
c <- rownames(train.data)[-is.na(train.data$v2a1)]
is.na(train.data$v2a1)
c <- rownames(train.data)[is.na(train.data$v2a1)==FALSE]
a <- rownames(train.data[(train.data$parentesco1==1 & is.na(train.data$v2a1)==FALSE), ])
which(train.datan)
na
NA
"NA"
"na"
na
train.data[3,2]
train.data[3,2] == NA
train.data[3,2] == "NA"
train.data[3,2] ==
is.na(train.data[3,2])
NaN
which(is.na(train.data[,2]) == FALSE & train.data$parentesco1 == 1)
b <- which(is.na(train.data[,2]) == FALSE)
c <- which(train.data$parentesco1 == 1)
NAcols <- which(apply(train.data, 2, function(x){NA %in% x}))
NAcols <- which(apply(train.data, 2, function(x){NA %in% x}))
rm(ist=ls())
rm(list=ls())
install.packages(qdapRegex, repos="https://cran.ism.ac.jp")
install.packages("qdapRegex", repos="https://cran.ism.ac.jp")
url <- "https://www.fifa.com/fifa-world-ranking/ranking-table/men/rank=281/index.html"
page <- readLines(url)
"TRUE" %in% grepl("December", page)
date.line <- grep("December", page)
date <- rm_between(page[date.line], "<ul class=\"slider-list items-1\"><li>", "</li>", extract=TRUE)[[1]]
library(qdapRegex)
date <- rm_between(page[date.line], "<ul class=\"slider-list items-1\"><li>", "</li>", extract=TRUE)[[1]]
rank.line <- grep("</div><div class=\"col-xs-12 clear-grid \">", page)
rm_between(page[rank.line], "/men/index.html\">", "</a>", extract=TRUE)
rm_between(page[rank.line], "/men/index.html\">", "</a>", extract=TRUE)[[1]]
rank <- rm_between(page[rank.line], "/men/index.html\">", "</a>", extract=TRUE)[[1]][1:100]
output <- c(date, rank)
result <- data.frame(c("Country", 1:100))
View(result)
result <- data.frame(1:100)
View(result)
result <- data.frame(result, rank)
View(result)
columns <- "Rank"
colunms <- c(columns, date)
library(qdapRegex)
result <- data.frame(1:100)
columns <- "Rank"
for(i in 1:287){
url <- paste("https://www.fifa.com/fifa-world-ranking/ranking-table/men/rank=",
i,
"/index.html", sep="")
page <- readLines(url)
if("TRUE" %in% grepl("December", page)){
# scraping rankings
# extract date
date.line <- grep("December", page)
date <- rm_between(page[date.line], "<ul class=\"slider-list items-1\"><li>", "</li>", extract=TRUE)[[1]]
# ranking line
rank.line <- grep("</div><div class=\"col-xs-12 clear-grid \">", page)
rank <- rm_between(page[rank.line], "/men/index.html\">", "</a>", extract=TRUE)[[1]][1:100]
colunms <- c(columns, date)
result <- data.frame(result, rank)
}
}
rm(list=ls())
library(qdapRegex)
result <- data.frame(1:100)
columns <- "Rank"
for(i in 1:287){
url <- paste("https://www.fifa.com/fifa-world-ranking/ranking-table/men/rank=",
i,
"/index.html", sep="")
page <- readLines(url)
if("TRUE" %in% grepl("December", page)){
# scraping rankings
# extract date
date.line <- grep("December", page)
date <- rm_between(page[date.line], "<ul class=\"slider-list items-1\"><li>", "</li>", extract=TRUE)[[1]]
# ranking line
rank.line <- grep("</div><div class=\"col-xs-12 clear-grid \">", page)
rank <- rm_between(page[rank.line], "/men/index.html\">", "</a>", extract=TRUE)[[1]][1:100]
colunms <- c(columns, date)
result <- data.frame(result, rank)
}
}
library(qdapRegex); library(tictoc)
tic()
result <- data.frame(1:100)
columns <- "Rank"
for(i in 1:287){
url <- paste("https://www.fifa.com/fifa-world-ranking/ranking-table/men/rank=",
i,
"/index.html", sep="")
page <- readLines(url)
if("TRUE" %in% grepl("December", page)){
# scraping rankings
# extract date
date.line <- grep("December", page)
date <- rm_between(page[date.line], "<ul class=\"slider-list items-1\"><li>", "</li>", extract=TRUE)[[1]]
# ranking line
rank.line <- grep("</div><div class=\"col-xs-12 clear-grid \">", page)
rank <- rm_between(page[rank.line], "/men/index.html\">", "</a>", extract=TRUE)[[1]][1:100]
columns <- c(columns, date)
result <- data.frame(result, rank)
}
}
toc()
rm(list=ls)
rm(list=ls())
mpg
library(ggplot2)
mpg
data_mpg <- mpg
data_mtcars <- mtcars
View(data_mpg)
View(data_mtcars)
View(data_mtcars)
View(data_mpg)
mpg?
mpg()
?mpg
rm(list=ls())
head(midwest)
head(economics)
head(economics_long)
library(caret)
head(Sacramento)
Sacramento
GermanCredit
g <- GermanCredit
co2
head(co2)
head(CO2)
head(ChickWeight)
head(chickwts)
head(longley)
?longley
require(stats); require(graphics)
## give the data set in the form it is used in S-PLUS:
longley.x <- data.matrix(longley[, 1:6])
longley.y <- longley[, "Employed"]
pairs(longley, main = "longley data")
summary(fm1 <- lm(Employed ~ ., data = longley))
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0),
mar = c(4.1, 4.1, 2.1, 1.1))
plot(fm1)
par(opar)
head(state.abb)
head(state.x77)
knitr::opts_chunk$set(echo = FALSE)
library(plotly); library(ggplot2); library(gridExtra)
h <- ggplot(mtcars, aes(x=log(mpg))) + geom_histogram(bins=12, color="grey", fill="grey20")
h1 <- ggplotly(h)
knitr::opts_chunk$set(echo = FALSE)
library(plotly); library(ggplot2); library(gridExtra)
h <- ggplot(mtcars, aes(x=log(mpg))) + geom_histogram(bins=12, color="grey", fill="grey20")
(h1 <- ggplotly(h))
h <- ggplot(mtcars, aes(x=log(mpg))) + geom_histogram(bins=12, color="grey", fill="grey20")
h1 <- ggplotly(h) %>% layout(autosize = F, width = 500, height = 500)
h1
h <- ggplot(mtcars, aes(x=log(mpg))) + geom_histogram(bins=12, color="grey", fill="grey20")
h1 <- ggplotly(h) %>% layout(autosize = F, width = 500, height = 350)
h1
h <- ggplot(mtcars, aes(x=log(mpg))) + geom_histogram(bins=12, color="grey", fill="grey20")
h1 <- ggplotly(h, autosize = F, width = 500, height = 350)
h1
mtcars
hrad(mtcars)
head(mtcars)
pal <- c("blue", "green")
p <- plot_ly(data =mtcars, x = ~log(hp), y = ~log(mpg), color = ~am, colors = pal) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", showlegend = FALSE)
pal <- c("blue", "green")
p <- plot_ly(data =mtcars, x = ~log(hp), y = ~log(mpg), color = ~am, colors = pal) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", showlegend = FALSE)
p
pal <- c("blue", "green")
p <- plot_ly(data =mtcars, x = ~log(hp), y = ~log(mpg), color = ~as.factor(am), colors = pal) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", showlegend = FALSE)
p
pal <- c("blue", "green")
p <- plot_ly(data =mtcars, x = ~log(hp), y = ~log(mpg), color = ~as.factor(am), colors = pal) %>%
add_markers(y = ~log(mpg), text = "log(mpg)")
p
mt <- mtcars
mt$tr <- as.factor(am)
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
View(mt)
names(mt$tr)
names(mt$tr) <- c("Auto", "Manual")
View(mt)
mt$tr
?mtcars
levels(mt$tr) <- c("Auto", "Manual")
View(mt)
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
pal <- c("blue", "green")
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr, colors = pal) %>%
add_markers(y = ~log(mpg), text = "log(mpg)")
p
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
pal <- c("blue", "green")
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr, colors = pal) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", size=10)
p
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
pal <- c("blue", "green")
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr, colors = pal) %>%
add_markers(y = ~log(mpg), text = "log(mpg)")
p
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
pal <- c("blue", "green")
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr, colors = pal) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10))
p
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10))
p
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#---
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#---
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#---
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10)) %>%
add_lines(y = ~y0)
p
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#---
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#---
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10)) %>%
add_lines(x = ~log(hp.new), y = ~y0)
p
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#---
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#---
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10)) %>%
add_lines(x = ~log(hp.new), y = ~y0, color = I("black"), name = "observed")
p
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#--- auto
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#--- manual
data1 <- data.frame("hp"=hp.new, "am"=rep(1, length(hp.new))) # step2~4 at once
y1 <- predict(m1, newdata=data1) # step5: predict y values = model outputs
lines(log(hp.new), y1, lty=1, lwd=2, col="black") # draw
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#--- auto
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#--- manual
data1 <- data.frame("hp"=hp.new, "am"=rep(1, length(hp.new))) # step2~4 at once
y1 <- predict(m1, newdata=data1) # step5: predict y values = model outputs
#---
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10)) %>%
add_lines(x = ~log(hp.new), y = ~y0, color = I("gray40"), name = "Auto Fit") %>%
add_lines(x = ~log(hp.new), y = ~y1, color = I("black"), name = "Manual Fit")
p
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#--- auto
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#--- manual
data1 <- data.frame("hp"=hp.new, "am"=rep(1, length(hp.new))) # step2~4 at once
y1 <- predict(m1, newdata=data1) # step5: predict y values = model outputs
#---
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10)) %>%
add_lines(x = ~log(hp.new), y = ~y0, color = I("gray60"), name = "Auto Fit") %>%
add_lines(x = ~log(hp.new), y = ~y1, color = I("black"), name = "Manual Fit")
p
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#--- auto
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#--- manual
data1 <- data.frame("hp"=hp.new, "am"=rep(1, length(hp.new))) # step2~4 at once
y1 <- predict(m1, newdata=data1) # step5: predict y values = model outputs
#---
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10)) %>%
add_lines(x = ~log(hp.new), y = ~y0, color = I("gray60"), name = "Auto Fit") %>%
add_lines(x = ~log(hp.new), y = ~y1, color = I("black"), name = "Manual Fit")
p
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#--- auto
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#--- manual
data1 <- data.frame("hp"=hp.new, "am"=rep(1, length(hp.new))) # step2~4 at once
y1 <- predict(m1, newdata=data1) # step5: predict y values = model outputs
#---
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10)) %>%
add_lines(x = ~log(hp.new), y = ~y0, color = I("gray60"), name = "Auto Fit") %>%
add_lines(x = ~log(hp.new), y = ~y1, color = I("black"), name = "Manual Fit")
p
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#--- auto
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#--- manual
data1 <- data.frame("hp"=hp.new, "am"=rep(1, length(hp.new))) # step2~4 at once
y1 <- predict(m1, newdata=data1) # step5: predict y values = model outputs
#---
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr, colors = c("#132B43", "#56B1F7")) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10)) %>%
add_lines(x = ~log(hp.new), y = ~y0, color = I("gray60"), name = "Auto Fit") %>%
add_lines(x = ~log(hp.new), y = ~y1, color = I("black"), name = "Manual Fit")
p
#---
mt <- mtcars
mt$tr <- as.factor(mtcars$am)
levels(mt$tr) <- c("Auto", "Manual")
#--- auto
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
hp.new <- min(mtcars$hp):max(mtcars$hp) # step1: new x values
am0 <- rep(0, length(hp.new)) # step2: new x2 values
data0 <- data.frame(hp.new, am0) # step3: combine x, x2
colnames(data0) <- c("hp", "am") # step4: make names the same as the model
y0 <- predict(m1, newdata=data0) # step5: predict y values = model outputs
#--- manual
data1 <- data.frame("hp"=hp.new, "am"=rep(1, length(hp.new))) # step2~4 at once
y1 <- predict(m1, newdata=data1) # step5: predict y values = model outputs
#---
p <- plot_ly(data =mt, x = ~log(hp), y = ~log(mpg), color = ~tr, colors = c("#56B1F7", "#132B43")) %>%
add_markers(y = ~log(mpg), text = "log(mpg)", marker = list(size=10)) %>%
add_lines(x = ~log(hp.new), y = ~y0, color = I("gray60"), name = "Auto Fit") %>%
add_lines(x = ~log(hp.new), y = ~y1, color = I("black"), name = "Manual Fit")
p
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
t1 <- as.table(round(summary(m1)$coef, 3))
dimnames(t1) <- list(c("Intercept", "Auto/Manual: 1", "log(Horsepower)"),
c("Coefficient", "Standard Error", "t-value", "p-value"))
knitr::kable(t1, caption = "Regression Results on log(MPG)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
library(kableExtra)
knitr::opts_chunk$set(echo = FALSE)
library(plotly); library(ggplot2); library(gridExtra); ; library(kableExtra)
knitr::opts_chunk$set(echo = FALSE)
library(plotly); library(ggplot2); library(gridExtra); library(kableExtra)
m1 <- lm(log(mpg)~as.factor(am)+log(hp), data=mtcars)
t1 <- as.table(round(summary(m1)$coef, 3))
dimnames(t1) <- list(c("Intercept", "Auto/Manual: 1", "log(Horsepower)"),
c("Coefficient", "Standard Error", "t-value", "p-value"))
knitr::kable(t1, caption = "Regression Results on log(MPG)") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
library(devtools)
install.packages("slidify", repos="https://cran.ism.ac.jp")
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install.packages("yaml", repos="https://cran.ism.ac.jp")
install.packages("yaml", repos = "https://cran.ism.ac.jp")
install_github('ramnathv/slidify')
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(shiny)
library(miniUI)
myFirstGadget <- function() {
# ui part
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
# server part
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/Shiny 5 - point input')
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/Shiny 5 - point input')
?runif
?rnorm
shiny::runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/final')
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/final')
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/final')
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/final')
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/final')
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/final')
getwd()
library(slidify)
author("final")
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/final')
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/final')
runApp('C:/Users/Junyoung Kim/Desktop/Data Science/JHU_Data Science/9. Developing Data Products/final')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='ethanjyk',
token='CE5D17711794AA965F6E302F5AD32458',
secret='q5RYr18Rb6SFTF2sG8Z4pPPvgiGv5CNKlqyaLpdr')
library(rsconnect)
getwd()
getwd()
